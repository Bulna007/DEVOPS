NACL (Network access control List)
----------------------------------
NACL stands for "network access control list". NACL is an firewall that is setup at the subnet level, so that we can enforce traffic restrictions on the group of resources that are part of the subnet. Since it is an firewall setup at subnet-level we can define the common traffic restrictions that has to be enforced on the group of resources using NACL

Few points about NACL:
1. The aws cloudplatform creates an default NACL rules for all the subnets of the vpc with default traffic pattern
Ingress:
Allow all the public network traffic towards the resources of the subnet
Egress:
Allow all the traffic from the subnet of resources to the external network 

2. Through the help of NACL we can enforce traffic restrictions based on
	1. source cidr
	2. protocol
	3. port
	4. action = allow/deny that traffic for the subnet resources

3. NACL rules are stateless
NACL engine doesnt keeps track of the request to identify an outbound traffic from subnet resource is a response or a request from the subnet resource. So to allow inbound/outbound traffic we need to configure separately NACL rules in both the direction always

4. NACL rules are ordered and should be assigned with sequence no while defining, the rules are applied in the specific order of the declaration
-------------------------------------------------------------------------------------------------------------------------------------
Elastic ip address
------------------
For each resource that we provision on the aws cloudplatform, it might assign 2 ip addresses
1. private ip address
2. public ip address

1. private ip address
The private ip address is generated by the aws cloudplatform for each resource during provisioning within the range of vpc and subnet cidr under which the resource is provisioned. There are #2 reasons behind having an private ip address for a resource
	1. to let us identify the resource uniquely within the vpc network 
	2. it is always adviced or recommended to access an resource through private ip address within the vpc instead of using public ip address, because the latency in accessing the resource using the private ip is very minimal as it is internal to aws cloudplatform network
	
2. public ip address
For the resources that are provisioned under the public subnet we can let aws assign public ip address, so that the resource can be accessed from public network. Incase if the resource is provisioned on private subnet, there is no use of assigning an public ip address for it, since there is no public network route available to access the resource

By default for every resource that is provisioned on the public subnet aws will not assign public ip address, there are 2 ways we can let the aws assign public ip address for the resource
	1. while creating an public subnet, we can enable an setting at the subnet-level asking to assign public ip address to all the resources that are provisioned under this subnet. 
	2. while provisioning the individual resource we need to explicitly enable asking aws to assign public ip address

These public ip addresses are of #2 types
1. ephemeral public ip address
2. elastic public ip address (eip)
		
1. ephemeral public ip address lives for a short-time (temporary): are by default generated and assigned to the resources by aws cloudplatform. These ip addresses would be changed upon restart or stop/start of the resources. So it is not adviced to use these ephemeral ip addresses for production usage and these ip addresses are supported for the sake of usage in lower-environment like dev, test, uat etc. ephemeral ip addresses are free of usage


2. elastic public ip address
For a resource in aws cloudplatform if we want to assign an permanent ip address then we need to use elatic ip address. The aws cloudplatform allows each aws account to have one elastic ip pool in which we can request and can have at max 5 ip addresses within that pool. 
	
These ip addresses are initially un-assigned, while provisioning the resources we can choose to assign one of the public ip address that are in un-assigned state from the elastic pool to the resource. So that upon deleting/deprovisioning the resource the ip address would be returned back to the elastic pool with a status as un-assigned back.
	
In this way we never loose the public addresses as those are always reserved and kept under elastic pool. But elastic public ip address are chargeable.
	
	


































